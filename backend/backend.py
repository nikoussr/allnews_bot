import requests
import feedparser

from configs import YAPI, API_KEY

# YandexGPT API URL
YANDEXGPT_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é YandexGPT

async def generate_summary(prompt, max_length=300):
    try:
        payload = {
            "modelUri": YAPI,
            "completionOptions": {
                "stream": False,
                "temperature": 0.5,
                "maxTokens": max_length
            },
            "messages": [
                {"role": "system", "text": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –≤—ã–∂–∏–º–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –í–æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å: –í –º–∏—Ä–µ üåç, –ü–æ–ª–∏—Ç–∏–∫–∞ üèõÔ∏è, –≠–∫–æ–Ω–æ–º–∏–∫–∞ üí∞, –í–∏–¥–µ–æ–∏–≥—Ä—ã üéÆ, –°–ø–æ—Ä—Ç üèÄ, –ö—É—Ö–Ω—è/–ì–æ—Ç–æ–≤–∫–∞ üç≥ ,–ñ–∏–≤–æ—Ç–Ω—ã–µ üêæ, –ü—Ä–∏—Ä–æ–¥–∞ üå≥, –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ üíª, –¢–µ—Ö–Ω–∏–∫–∞ ‚öôÔ∏è, –ú—É–∑—ã–∫–∞ üéµ, –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ üìö, –ö–∏–Ω–æ/–§–∏–ª—å–º—ã üé¨, –ò—Å–∫—É—Å—Å—Ç–≤–æ üé®, –ù–∞—É–∫–∞ üî¨, –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ üöó, –≠–∫–æ–ª–æ–≥–∏—è üåø, –ú–æ–¥–∞ üëó"},
                {"role": "user", "text": prompt}
            ]
        }
        headers = {
            "Authorization": API_KEY,
            "Content-Type": "application/json"
        }
        response = requests.post(YANDEXGPT_API_URL, json=payload, headers=headers)
        result = response.json()
        if "result" in result:
            return result["result"]["alternatives"][0]["message"]["text"].strip()
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã–∂–∏–º–∫—É."
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ YandexGPT: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã–∂–∏–º–∫—É."

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS-–ª–µ–Ω—Ç

async def get_lenta_news():
    url = "https://lenta.ru/rss"
    feed = feedparser.parse(url)
    news_list = []
    for entry in feed.entries[:8]:
        news_list.append({"title": entry.title, "link": entry.link, "source": "Lenta.ru"})
    return news_list

async def get_rbc_news():
    url = "https://rssexport.rbc.ru/rbcnews/news/30/full.rss"
    feed = feedparser.parse(url)
    news_list = []
    for entry in feed.entries[:8]:
        news_list.append({"title": entry.title, "link": entry.link, "source": "–†–ë–ö"})
    return news_list

async def get_gazeta_news():
    url = "https://www.gazeta.ru/export/rss/lenta.xml"
    feed = feedparser.parse(url)
    news_list = []
    for entry in feed.entries[:8]:
        news_list.append({"title": entry.title, "link": entry.link, "source": "–ì–∞–∑–µ—Ç–∞.Ru"})
    return news_list

async def get_kommersant_news():
    url = "https://www.kommersant.ru/RSS/news.xml"
    feed = feedparser.parse(url)
    news_list = []
    for entry in feed.entries[:8]:
        news_list.append({"title": entry.title, "link": entry.link, "source": "–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç—ä"})
    return news_list

async def get_all_news():
    news_list = []
    news_list.extend(await get_lenta_news())
    news_list.extend(await get_rbc_news())
    news_list.extend(await get_gazeta_news())
    news_list.extend(await get_kommersant_news())
    return news_list


